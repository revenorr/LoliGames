#T#PoiDecalsProperties

// Decal Texture
[HideInInspector] m_start_DecalSection ("Decals--{button_help:{text:Tutorial,action:{type:URL,data:https://www.youtube.com/watch?v=xHoQVN_F7JE&list=PL4_Gy3VRJSmbXfQSldzUiChgABQsoBlLw},hover:YouTube},reference_property:_DecalEnabled}", Float) = 0
_DecalMask ("Decal RGBA Mask--{reference_properties:[_DecalMaskPan, _DecalMaskUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_DecalMaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _DecalMaskUV ("UV", Int) = 0
// Decal 0
[HideInInspector] m_start_Decal0 ("Decal 0", Float) = 0
[HideInInspector][ThryToggle(GEOM_TYPE_BRANCH)]_DecalEnabled ("Enable", Float) = 0
_DecalColor ("Color", Color) = (1, 1, 1, 1)
_DecalEmissionStrength ("Emission Strength", Range(0, 20)) = 0
_DecalTexture ("Decal--{reference_properties:[_DecalTexturePan, _DecalTextureUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_DecalTexturePan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _DecalTextureUV ("UV", Int) = 0
[ToggleUI]_DecalTiled ("Tiled?", Float) = 0
_Decal0Depth ("Depth", Float) = 0
[Vector2]_DecalScale ("Scale", Vector) = (1, 1, 0, 0)
[Vector2]_DecalPosition ("Position", Vector) = (.5, .5, 0, 0)
_DecalRotation ("Rotation", Range(0, 360)) = 0
_DecalRotationSpeed ("Rotation Speed", Float) = 0
[ThryWideEnum(Replace, 0, Darken, 1, Multiply, 2, Color Burn, 3, Linear Burn, 4, Lighten, 5, Screen, 6, Color Dodge, 7, Linear Dodge (Add), 8, Overlay, 9, Soft Lighten, 10, Hard Light, 11, Vivid Light, 12, Linear Light, 13, Pin Light, 14, Hard Mix, 15, Difference, 16, Exclusion, 17, Subtract, 18, Divide, 19)]_DecalBlendType ("Blending", Range(0, 1)) = 0
_DecalBlendAlpha ("Alpha", Range(0,1)) = 1
[ToggleUI]_DecalHueShiftEnabled ("Hue Shift Enabled", Float) = 0
_DecalHueShiftSpeed ("Shift Speed", Float) = 0
_DecalHueShift ("Hue Shift", Range(0,1)) = 0
// Decal 0 Audio Link
[HideInInspector] m_start_Decal0AudioLink ("Audio Link ♫--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal0ScaleBand ("Scale Band", Int) = 0
_AudioLinkDecal0Scale ("Scale Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal0RotationBand ("Rotation Band", Int) = 0
[Vector2]_AudioLinkDecal0Rotation ("Rotation Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal0AlphaBand ("Alpha Band", Int) = 0
[Vector2]_AudioLinkDecal0Alpha ("Alpha Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal0EmissionBand ("Emission Band", Int) = 0
[Vector2]_AudioLinkDecal0Emission ("Emission Mod", Vector) = (0,0,0,0)
[HideInInspector] m_end_Decal0AudioLink ("Audio Link", Float) = 0
[HideInInspector] m_end_Decal0 ("Decal 0", Float) = 0
// Decal 1
//"GEOM_TYPE_FROND"
//"DEPTH_OF_FIELD_COC_VIEW"
[HideInInspector] m_start_Decal1 ("Decal 1--{reference_property:_DecalEnabled1}", Float) = 0
[HideInInspector][ThryToggle(GEOM_TYPE_BRANCH_DETAIL)]_DecalEnabled1 ("Enable", Float) = 0
_DecalColor1 ("Color", Color) = (1, 1, 1, 1)
_DecalEmissionStrength1 ("Emission Strength", Range(0, 20)) = 0
_DecalTexture1 ("Decal--{reference_properties:[_DecalTexture1Pan, _DecalTexture1UV]}", 2D) = "white" { }
[HideInInspector][Vector2]_DecalTexture1Pan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _DecalTexture1UV ("UV", Int) = 0
[ToggleUI]_DecalTiled1 ("Tiled?", Float) = 0
_Decal1Depth ("Depth", Float) = 0
[Vector2]_DecalScale1 ("Scale", Vector) = (1, 1, 0, 0)
[Vector2]_DecalPosition1 ("Position", Vector) = (.5, .5, 0, 0)
_DecalRotation1 ("Rotation", Range(0, 360)) = 0
_DecalRotationSpeed1 ("Rotation Speed", Float) = 0
[ThryWideEnum(Replace, 0, Darken, 1, Multiply, 2, Color Burn, 3, Linear Burn, 4, Lighten, 5, Screen, 6, Color Dodge, 7, Linear Dodge (Add), 8, Overlay, 9, Soft Lighten, 10, Hard Light, 11, Vivid Light, 12, Linear Light, 13, Pin Light, 14, Hard Mix, 15, Difference, 16, Exclusion, 17, Subtract, 18, Divide, 19)]_DecalBlendType1 ("Blending", Range(0, 1)) = 0
_DecalBlendAlpha1 ("Alpha", Range(0,1)) = 1
[ToggleUI]_DecalHueShiftEnabled1 ("Hue Shift Enabled", Float) = 0
_DecalHueShiftSpeed1 ("Shift Speed", Float) = 0
_DecalHueShift1 ("Hue Shift", Range(0,1)) = 0
// Decal 1 Audio Link
[HideInInspector] m_start_Decal1AudioLink ("Audio Link ♫--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal1ScaleBand ("Scale Band", Int) = 0
_AudioLinkDecal1Scale ("Scale Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal1RotationBand ("Rotation Band", Int) = 0
[Vector2]_AudioLinkDecal1Rotation ("Rotation Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal1AlphaBand ("Alpha Band", Int) = 0
[Vector2]_AudioLinkDecal1Alpha ("Alpha Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal1EmissionBand ("Emission Band", Int) = 0
[Vector2]_AudioLinkDecal1Emission ("Emission Mod", Vector) = (0,0,0,0)
[HideInInspector] m_end_Decal1AudioLink ("Audio Link", Float) = 0
[HideInInspector] m_end_Decal1 ("Decal 0", Float) = 0
// Decal 2
[HideInInspector] m_start_Decal2 ("Decal 2--{reference_property:_DecalEnabled2}", Float) = 0
[HideInInspector][ThryToggle(GEOM_TYPE_FROND)]_DecalEnabled2 ("Enable", Float) = 0
_DecalColor2 ("Color", Color) = (1, 1, 1, 1)
_DecalEmissionStrength2 ("Emission Strength", Range(0, 20)) = 0
_DecalTexture2 ("Decal--{reference_properties:[_DecalTexture2Pan, _DecalTexture2UV]}", 2D) = "white" { }
[HideInInspector][Vector2]_DecalTexture2Pan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _DecalTexture2UV ("UV", Int) = 0
[ToggleUI]_DecalTiled2 ("Tiled?", Float) = 0
_Decal2Depth ("Depth", Float) = 0
[Vector2]_DecalScale2 ("Scale", Vector) = (1, 1, 0, 0)
[Vector2]_DecalPosition2 ("Position", Vector) = (.5, .5, 0, 0)
_DecalRotation2 ("Rotation", Range(0, 360)) = 0
_DecalRotationSpeed2 ("Rotation Speed", Float) = 0
[ThryWideEnum(Replace, 0, Darken, 1, Multiply, 2, Color Burn, 3, Linear Burn, 4, Lighten, 5, Screen, 6, Color Dodge, 7, Linear Dodge (Add), 8, Overlay, 9, Soft Lighten, 10, Hard Light, 11, Vivid Light, 12, Linear Light, 13, Pin Light, 14, Hard Mix, 15, Difference, 16, Exclusion, 17, Subtract, 18, Divide, 19)]_DecalBlendType2 ("Blending", Range(0, 1)) = 0
_DecalBlendAlpha2 ("Alpha", Range(0,1)) = 1
[ToggleUI]_DecalHueShiftEnabled2 ("Hue Shift Enabled", Float) = 0
_DecalHueShiftSpeed2 ("Shift Speed", Float) = 0
_DecalHueShift2 ("Hue Shift", Range(0,1)) = 0
// Decal 2 Audio Link
[HideInInspector] m_start_Decal2AudioLink ("Audio Link ♫--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal2ScaleBand ("Scale Band", Int) = 0
_AudioLinkDecal2Scale ("Scale Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal2RotationBand ("Rotation Band", Int) = 0
[Vector2]_AudioLinkDecal2Rotation ("Rotation Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal2AlphaBand ("Alpha Band", Int) = 0
[Vector2]_AudioLinkDecal2Alpha ("Alpha Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal2EmissionBand ("Emission Band", Int) = 0
[Vector2]_AudioLinkDecal2Emission ("Emission Mod", Vector) = (0,0,0,0)
[HideInInspector] m_end_Decal2AudioLink ("Audio Link", Float) = 0
[HideInInspector] m_end_Decal2 ("Decal 0", Float) = 0
// Decal 3
[HideInInspector] m_start_Decal3 ("Decal 3--{reference_property:_DecalEnabled3}", Float) = 0
[HideInInspector][ThryToggle(DEPTH_OF_FIELD_COC_VIEW)]_DecalEnabled3 ("Enable", Float) = 0
_DecalColor3 ("Color", Color) = (1, 1, 1, 1)
_DecalEmissionStrength3 ("Emission Strength", Range(0, 20)) = 0
_DecalTexture3 ("Decal--{reference_properties:[_DecalTexture3Pan, _DecalTexture3UV]}", 2D) = "white" { }
[HideInInspector][Vector2]_DecalTexture3Pan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _DecalTexture3UV ("UV", Int) = 0
[ToggleUI]_DecalTiled3 ("Tiled?", Float) = 0
_Decal3Depth ("Depth", Float) = 0
[Vector2]_DecalScale3 ("Scale", Vector) = (1, 1, 0, 0)
[Vector2]_DecalPosition3 ("Position", Vector) = (.5, .5, 0, 0)
_DecalRotation3 ("Rotation", Range(0, 360)) = 0
_DecalRotationSpeed3 ("Rotation Speed", Float) = 0
[ThryWideEnum(Replace, 0, Darken, 1, Multiply, 2, Color Burn, 3, Linear Burn, 4, Lighten, 5, Screen, 6, Color Dodge, 7, Linear Dodge (Add), 8, Overlay, 9, Soft Lighten, 10, Hard Light, 11, Vivid Light, 12, Linear Light, 13, Pin Light, 14, Hard Mix, 15, Difference, 16, Exclusion, 17, Subtract, 18, Divide, 19)]_DecalBlendType3 ("Blending", Range(0, 1)) = 0
_DecalBlendAlpha3 ("Alpha", Range(0,1)) = 1
[ToggleUI]_DecalHueShiftEnabled3 ("Hue Shift Enabled", Float) = 0
_DecalHueShiftSpeed3 ("Shift Speed", Float) = 0
_DecalHueShift3 ("Hue Shift", Range(0,1)) = 0
// Decal 3 Audio Link
[HideInInspector] m_start_Decal3AudioLink ("Audio Link ♫--{ condition_showS:_EnableAudioLink==1}", Float) = 0
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal3ScaleBand ("Scale Band", Int) = 0
_AudioLinkDecal3Scale ("Scale Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal3RotationBand ("Rotation Band", Int) = 0
[Vector2]_AudioLinkDecal3Rotation ("Rotation Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal3AlphaBand ("Alpha Band", Int) = 0
[Vector2]_AudioLinkDecal3Alpha ("Alpha Mod", Vector) = (0,0,0,0)
[Enum(Bass, 0, Low Mid, 1, High Mid, 2, Treble, 3)] _AudioLinkDecal3EmissionBand ("Emission Band", Int) = 0
[Vector2]_AudioLinkDecal3Emission ("Emission Mod", Vector) = (0,0,0,0)
[HideInInspector] m_end_Decal3AudioLink ("Audio Link", Float) = 0
[HideInInspector] m_end_Decal3 ("Decal 0", Float) = 0
[HideInInspector] m_end_DecalSection ("Decal", Float) = 0

#T#PoiDecalsKeywords
#pragma shader_feature GEOM_TYPE_BRANCH
#pragma shader_feature GEOM_TYPE_BRANCH_DETAIL
#pragma shader_feature GEOM_TYPE_FROND
#pragma shader_feature DEPTH_OF_FIELD_COC_VIEW

#T#PoiDecalsVariables
Texture2D _DecalMask;
float4 _DecalMask_ST;
float2 _DecalMaskPan;
float _DecalMaskUV;

#ifdef COLOR_GRADING_LOG_VIEW
    // Audio Link
    half _AudioLinkDecal0ScaleBand;
    float4 _AudioLinkDecal0Scale;
    half _AudioLinkDecal0RotationBand;
    float2 _AudioLinkDecal0Rotation;
    half _AudioLinkDecal0AlphaBand;
    float2 _AudioLinkDecal0Alpha;
    half _AudioLinkDecal0EmissionBand;
    float2 _AudioLinkDecal0Emission;

    half _AudioLinkDecal1ScaleBand;
    float4 _AudioLinkDecal1Scale;
    half _AudioLinkDecal1RotationBand;
    float2 _AudioLinkDecal1Rotation;
    half _AudioLinkDecal1AlphaBand;
    float2 _AudioLinkDecal1Alpha;
    half _AudioLinkDecal1EmissionBand;
    float2 _AudioLinkDecal1Emission;

    half _AudioLinkDecal2ScaleBand;
    float4 _AudioLinkDecal2Scale;
    half _AudioLinkDecal2RotationBand;
    float2 _AudioLinkDecal2Rotation;
    half _AudioLinkDecal2AlphaBand;
    float2 _AudioLinkDecal2Alpha;
    half _AudioLinkDecal2EmissionBand;
    float2 _AudioLinkDecal2Emission;

    half _AudioLinkDecal3ScaleBand;
    float4 _AudioLinkDecal3Scale;
    half _AudioLinkDecal3RotationBand;
    float2 _AudioLinkDecal3Rotation;
    half _AudioLinkDecal3AlphaBand;
    float2 _AudioLinkDecal3Alpha;
    half _AudioLinkDecal3EmissionBand;
    float2 _AudioLinkDecal3Emission;
#endif

#ifdef GEOM_TYPE_BRANCH
    Texture2D _DecalTexture;
    float4 _DecalTexture_ST;
    float2 _DecalTexturePan;
    float _DecalTextureUV;

    float4 _DecalColor;
    fixed _DecalTiled;
    float _DecalBlendType;
    half _DecalRotation;
    half2 _DecalScale;
    half2 _DecalPosition;
    half _DecalRotationSpeed;
    float _DecalEmissionStrength;
    float _DecalBlendAlpha;
    float _DecalHueShiftEnabled;
    float _DecalHueShift;
    float _DecalHueShiftSpeed;
    float _Decal0Depth;
#endif

#ifdef GEOM_TYPE_BRANCH_DETAIL
    Texture2D _DecalTexture1;
    float4 _DecalTexture1_ST;
    float2 _DecalTexture1Pan;
    float _DecalTexture1UV;

    float4 _DecalColor1;
    fixed _DecalTiled1;
    float _DecalBlendType1;
    half _DecalRotation1;
    half2 _DecalScale1;
    half2 _DecalPosition1;
    half _DecalRotationSpeed1;
    float _DecalEmissionStrength1;
    float _DecalBlendAlpha1;
    float _DecalHueShiftEnabled1;
    float _DecalHueShift1;
    float _DecalHueShiftSpeed1;
    float _Decal1Depth;
#endif

#ifdef GEOM_TYPE_FROND
    Texture2D _DecalTexture2;
    float4 _DecalTexture2_ST;
    float2 _DecalTexture2Pan;
    float _DecalTexture2UV;
    float4 _DecalColor2;
    fixed _DecalTiled2;
    float _DecalBlendType2;
    half _DecalRotation2;
    half2 _DecalScale2;
    half2 _DecalPosition2;
    half _DecalRotationSpeed2;
    float _DecalEmissionStrength2;
    float _DecalBlendAlpha2;
    float _DecalHueShiftEnabled2;
    float _DecalHueShift2;
    float _DecalHueShiftSpeed2;
    float _Decal2Depth;
#endif

#ifdef DEPTH_OF_FIELD_COC_VIEW
    Texture2D _DecalTexture3;
    float4 _DecalTexture3_ST;
    float2 _DecalTexture3Pan;
    float _DecalTexture3UV;
    float4 _DecalColor3;
    fixed _DecalTiled3;
    float _DecalBlendType3;
    half _DecalRotation3;
    half2 _DecalScale3;
    half2 _DecalPosition3;
    half _DecalRotationSpeed3;
    float _DecalEmissionStrength3;
    float _DecalBlendAlpha3;
    float _DecalHueShiftEnabled3;
    float _DecalHueShift3;
    float _DecalHueShiftSpeed3;
    float _Decal3Depth;
#endif

/*
Texture2D ;
float4 _ST;
float2 Pan;
float UV;
*/

#T#PoiDecalsFunctions
#ifdef GEOM_TYPE_BRANCH

    float2 decalUV(float uvNumber, float2 position, half rotation, half rotationSpeed, half2 scale, float depth, in PoiMesh poiMesh, in PoiCam poiCam)
    {
        float2 uv = poiMesh.uv[uvNumber] + calcParallax(depth + 1, poiCam);
        float2 decalCenter = position;
        float theta = radians(rotation + _Time.z * rotationSpeed);
        float cs = cos(theta);
        float sn = sin(theta);
        uv = float2((uv.x - decalCenter.x) * cs - (uv.y - decalCenter.y) * sn + decalCenter.x, (uv.x - decalCenter.x) * sn + (uv.y - decalCenter.y) * cs + decalCenter.y);
        uv = remap(uv, float2(0, 0) - scale / 2 + position, scale / 2 + position, float2(0, 0), float2(1, 1));
        return uv;
    }

    inline float3 decalHueShift(float enabled, float3 color, float shift, float shiftSpeed)
    {
        //UNITY_BRANCH
        if (enabled)
        {
            color = hueShift(color, shift + _Time.y * shiftSpeed);
        }
        return color;
    }

    inline float applyTilingClipping(float enabled, float2 uv)
    {
        float ret = 1;
        //UNITY_BRANCH
        if (!enabled)
        {
            if (uv.x > 1 || uv.y > 1 || uv.x < 0 || uv.y < 0)
            {
                ret = 0;
            }
        }
        return ret;
    }

    void applyDecals(inout PoiFragData poiFragData, in PoiMesh poiMesh, in PoiCam poiCam)
    {
        
        #if defined(PROP_DECALMASK) || !defined(OPTIMIZER_ENABLED)
            float4 decalMask = POI2D_SAMPLER_PAN(_DecalMask, _MainTex, poiMesh.uv[_DecalMaskUV], _DecalMaskPan);
        #else
            float4 decalMask = 1;
        #endif
        
        float4 decalColor = 1;
        float2 uv = 0;
        
        // Decal 0
        float2 decalScale = float2(1, 1);
        float decalRotation = 0;
        decalScale = _DecalScale;
        #if defined(PROP_DECALTEXTURE) || !defined(OPTIMIZER_ENABLED)
            #ifdef POI_AUDIOLINK
                //UNITY_BRANCH
                if (poiMods.audioLinkTextureExists)
                {
                    decalScale += lerp(_AudioLinkDecal0Scale.xy, _AudioLinkDecal0Scale.zw, poiMods.audioLink[_AudioLinkDecal0ScaleBand]);
                    decalRotation += lerp(_AudioLinkDecal0Rotation.x, _AudioLinkDecal0Rotation.y, poiMods.audioLink[_AudioLinkDecal0RotationBand]);
                }
            #endif
            uv = decalUV(_DecalTextureUV, _DecalPosition, _DecalRotation + decalRotation, _DecalRotationSpeed, decalScale, _Decal0Depth, poiMesh, poiCam);
            decalColor = POI2D_SAMPLER_PAN(_DecalTexture, _MainTex, uv, _DecalTexturePan) * _DecalColor;
        #else
            uv = decalUV(_DecalTextureUV, _DecalPosition, _DecalRotation + decalRotation, _DecalRotationSpeed, decalScale, _Decal0Depth, poiMesh, poiCam);
            decalColor = _DecalColor;
        #endif
        decalColor.rgb = decalHueShift(_DecalHueShiftEnabled, decalColor.rgb, _DecalHueShift, _DecalHueShiftSpeed);
        decalColor.a *= applyTilingClipping(_DecalTiled, uv) * decalMask.r;

        float audioLinkDecalAlpha0 = 0;
        #ifdef POI_AUDIOLINK
            audioLinkDecalAlpha0 = lerp(_AudioLinkDecal0Alpha.x, _AudioLinkDecal0Alpha.y, poiMods.audioLink[_AudioLinkDecal0AlphaBand]) * poiMods.audioLinkTextureExists;
        #endif

        poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, customBlend(poiFragData.baseColor.rgb, decalColor.rgb, _DecalBlendType), decalColor.a * saturate(_DecalBlendAlpha + audioLinkDecalAlpha0));
        
        float audioLinkDecalEmission0 = 0;
        #ifdef POI_AUDIOLINK
            audioLinkDecalEmission0 = lerp(_AudioLinkDecal0Emission.x, _AudioLinkDecal0Emission.y, poiMods.audioLink[_AudioLinkDecal0EmissionBand]) * poiMods.audioLinkTextureExists;
        #endif

        poiFragData.emission += decalColor.rgb * decalColor.a * max(_DecalEmissionStrength + audioLinkDecalEmission0, 0);

        #ifdef GEOM_TYPE_BRANCH_DETAIL
            // Decal 1
            decalScale = _DecalScale1;
            decalRotation = 0;
            #if defined(PROP_DECALTEXTURE1) || !defined(OPTIMIZER_ENABLED)
                #ifdef POI_AUDIOLINK
                    //UNITY_BRANCH
                    if (poiMods.audioLinkTextureExists)
                    {
                        decalScale += lerp(_AudioLinkDecal1Scale.xy, _AudioLinkDecal1Scale.zw, poiMods.audioLink[_AudioLinkDecal1ScaleBand]);
                        decalRotation += lerp(_AudioLinkDecal1Rotation.x, _AudioLinkDecal1Rotation.y, poiMods.audioLink[_AudioLinkDecal1RotationBand]);
                    }
                #endif
                uv = decalUV(_DecalTexture1UV, _DecalPosition1, _DecalRotation1 + decalRotation, _DecalRotationSpeed1, decalScale, _Decal1Depth, poiMesh, poiCam);
                decalColor = POI2D_SAMPLER_PAN(_DecalTexture1, _MainTex, uv, _DecalTexture1Pan) * _DecalColor1;
            #else
                uv = decalUV(_DecalTexture1UV, _DecalPosition1, _DecalRotation1 + decalRotation, _DecalRotationSpeed1, decalScale, _Decal1Depth, poiMesh, poiCam);
                decalColor = _DecalColor1;
            #endif
            decalColor.rgb = decalHueShift(_DecalHueShiftEnabled1, decalColor.rgb, _DecalHueShift1, _DecalHueShiftSpeed1);
            decalColor.a *= applyTilingClipping(_DecalTiled1, uv) * decalMask.g;

            float audioLinkDecalAlpha1 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalAlpha1 = lerp(_AudioLinkDecal1Alpha.x, _AudioLinkDecal1Alpha.y, poiMods.audioLink[_AudioLinkDecal1AlphaBand]) * poiMods.audioLinkTextureExists;
            #endif

            poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, customBlend(poiFragData.baseColor.rgb, decalColor.rgb, _DecalBlendType1), decalColor.a * saturate(_DecalBlendAlpha1 + audioLinkDecalAlpha1));
            
            float audioLinkDecalEmission1 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalEmission1 = lerp(_AudioLinkDecal1Emission.x, _AudioLinkDecal1Emission.y, poiMods.audioLink[_AudioLinkDecal1EmissionBand]) * poiMods.audioLinkTextureExists;
            #endif
            
            poiFragData.emission += decalColor.rgb * decalColor.a * max(_DecalEmissionStrength1 + audioLinkDecalEmission1, 0);
        #endif
        #ifdef GEOM_TYPE_FROND
            // Decal 2
            decalScale = _DecalScale2;
            decalRotation = 0;
            #if defined(PROP_DECALTEXTURE2) || !defined(OPTIMIZER_ENABLED)
                #ifdef POI_AUDIOLINK
                    //UNITY_BRANCH
                    if (poiMods.audioLinkTextureExists)
                    {
                        decalScale += lerp(_AudioLinkDecal2Scale.xy, _AudioLinkDecal2Scale.zw, poiMods.audioLink[_AudioLinkDecal2ScaleBand]);
                        decalRotation += lerp(_AudioLinkDecal2Rotation.x, _AudioLinkDecal2Rotation.y, poiMods.audioLink[_AudioLinkDecal2RotationBand]);
                    }
                #endif
                uv = decalUV(_DecalTexture2UV, _DecalPosition2, _DecalRotation2 + decalRotation, _DecalRotationSpeed2, decalScale, _Decal2Depth, poiMesh, poiCam);
                decalColor = POI2D_SAMPLER_PAN(_DecalTexture2, _MainTex, uv, _DecalTexture2Pan) * _DecalColor2;
            #else
                uv = decalUV(_DecalTexture2UV, _DecalPosition2, _DecalRotation2 + decalRotation, _DecalRotationSpeed2, decalScale, _Decal2Depth, poiMesh, poiCam);
                decalColor = _DecalColor2;
            #endif
            decalColor.rgb = decalHueShift(_DecalHueShiftEnabled2, decalColor.rgb, _DecalHueShift2, _DecalHueShiftSpeed2);
            decalColor.a *= applyTilingClipping(_DecalTiled2, uv) * decalMask.b;

            float audioLinkDecalAlpha2 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalAlpha2 = lerp(_AudioLinkDecal2Alpha.x, _AudioLinkDecal2Alpha.y, poiMods.audioLink[_AudioLinkDecal2AlphaBand]) * poiMods.audioLinkTextureExists;
            #endif

            poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, customBlend(poiFragData.baseColor.rgb, decalColor.rgb, _DecalBlendType2), decalColor.a * saturate(_DecalBlendAlpha2 + audioLinkDecalAlpha2));

            float audioLinkDecalEmission2 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalEmission2 = lerp(_AudioLinkDecal2Emission.x, _AudioLinkDecal2Emission.y, poiMods.audioLink[_AudioLinkDecal2EmissionBand]) * poiMods.audioLinkTextureExists;
            #endif

            poiFragData.emission += decalColor.rgb * decalColor.a * max(_DecalEmissionStrength2 + audioLinkDecalEmission2, 0);
        #endif
        #ifdef DEPTH_OF_FIELD_COC_VIEW
            // Decal 3
            decalScale = _DecalScale3;
            decalRotation = 0;
            #if defined(PROP_DECALTEXTURE3) || !defined(OPTIMIZER_ENABLED)
                #ifdef POI_AUDIOLINK
                    //UNITY_BRANCH
                    if (poiMods.audioLinkTextureExists)
                    {
                        decalScale += lerp(_AudioLinkDecal3Scale.xy, _AudioLinkDecal3Scale.zw, poiMods.audioLink[_AudioLinkDecal3ScaleBand]);
                        decalRotation += lerp(_AudioLinkDecal3Rotation.x, _AudioLinkDecal3Rotation.y, poiMods.audioLink[_AudioLinkDecal3RotationBand]);
                    }
                #endif
                uv = decalUV(_DecalTexture3UV, _DecalPosition3, _DecalRotation3 + decalRotation, _DecalRotationSpeed3, decalScale, _Decal3Depth, poiMesh, poiCam);
                decalColor = POI2D_SAMPLER_PAN(_DecalTexture3, _MainTex, uv, _DecalTexture3Pan) * _DecalColor3;
            #else
                uv = decalUV(_DecalTexture3UV, _DecalPosition3, _DecalRotation3 + decalRotation, _DecalRotationSpeed3, decalScale, _Decal3Depth, poiMesh, poiCam);
                decalColor = _DecalColor3;
            #endif
            decalColor.rgb = decalHueShift(_DecalHueShiftEnabled3, decalColor.rgb, _DecalHueShift3, _DecalHueShiftSpeed3);
            decalColor.a *= applyTilingClipping(_DecalTiled3, uv) * decalMask.a;

            float audioLinkDecalAlpha3 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalAlpha3 = lerp(_AudioLinkDecal3Alpha.x, _AudioLinkDecal3Alpha.y, poiMods.audioLink[_AudioLinkDecal3AlphaBand]) * poiMods.audioLinkTextureExists;
            #endif

            poiFragData.baseColor.rgb = lerp(poiFragData.baseColor.rgb, customBlend(poiFragData.baseColor.rgb, decalColor.rgb, _DecalBlendType3), decalColor.a * saturate(_DecalBlendAlpha3 + audioLinkDecalAlpha3));

            float audioLinkDecalEmission3 = 0;
            #ifdef POI_AUDIOLINK
                audioLinkDecalEmission3 = lerp(_AudioLinkDecal3Emission.x, _AudioLinkDecal3Emission.y, poiMods.audioLink[_AudioLinkDecal3EmissionBand]) * poiMods.audioLinkTextureExists;
            #endif

            poiFragData.emission += decalColor.rgb * decalColor.a * max(_DecalEmissionStrength3 + audioLinkDecalEmission3, 0);
        #endif
        
        poiFragData.baseColor = saturate(poiFragData.baseColor);
    }
#endif

#T#PoiDecalsFunctionCalls
#ifdef GEOM_TYPE_BRANCH
    applyDecals(poiFragData, poiMesh, poiCam);
#endif

