#T#PoiStylizedSpecularProperties
[HideInInspector] m_start_stylizedSpec (" Stylized Specular--{reference_property:_StylizedSpecular}", Float) = 0
[HideInInspector][ThryToggle(POI_STYLIZED_StylizedSpecular)]_StylizedSpecular ("Enable", Float) = 0

[ThryTexture]_HighColor_Tex ("Specular Map--{reference_properties:[_HighColor_TexPan, _HighColor_TexUV]}", 2D) = "white" { }
[HideInInspector][Vector2]_HighColor_TexPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_HighColor_TexUV ("UV", Int) = 0
_HighColor ("Tint", Color) = (1, 1, 1, 1)
_Set_HighColorMask ("Mask--{reference_properties:[_Set_HighColorMaskPan, _Set_HighColorMaskUV, _Tweak_HighColorMaskLevel]}", 2D) = "white" { }
[HideInInspector][Vector2]_Set_HighColorMaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)]_Set_HighColorMaskUV ("UV", Int) = 0
[HideInInspector]_Tweak_HighColorMaskLevel ("Mask Level", Range(-1, 1)) = 0
[ThryWideEnum(Toon, 0, Realistic, 1)]_Is_SpecularToHighColor ("Specular Mode", Float) = 0
[ThryWideEnum(Replace, 0, Add, 1)]_Is_BlendAddToHiColor ("Color Blend Mode", Int) = 0

_StylizedSpecularStrength ("Strength", Float) = 1
[ToggleUI] _UseLightColor ("Use Light Color", Float) = 1
[Space(8)]

[ThryHeaderLabel(Layer 1, 13)]
_HighColor_Power ("Size", Range(0, 1)) = 0.2
_StylizedSpecularFeather ("Feather", Range(0, 1)) = 0
_Layer1Strength ("Strength", Range(0, 1)) = 1
[Space(8)]

[ThryHeaderLabel(Layer 2, 13)]
_Layer2Size ("Size", Range(0, 1)) = 0
_StylizedSpecular2Feather ("Feather", Range(0, 1)) = 0
_Layer2Strength ("Strength", Range(0, 1)) = 0
[HideInInspector] m_end_stylizedSpec ("", Float) = 0
#T#PoiStylizedSpecularKeywords
#pragma shader_feature_local POI_STYLIZED_StylizedSpecular

#T#PoiStylizedSpecularVariables
#ifdef POI_STYLIZED_StylizedSpecular
	#if defined(PROP_HIGHCOLOR_TEX) || !defined(OPTIMIZER_ENABLED)
		Texture2D _HighColor_Tex;
	#endif
	float4 _HighColor_Tex_ST;
	float2 _HighColor_TexPan;
	float _HighColor_TexUV;

	#if defined(PROP_SET_HIGHCOLORMASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _Set_HighColorMask;
	#endif
	float4 _Set_HighColorMask_ST;
	float2 _Set_HighColorMaskPan;
	float _Set_HighColorMaskUV;
	float _Tweak_HighColorMaskLevel;

	/*
	#if defined(PROP_StylizedSpecularOPTMAP1) || !defined(OPTIMIZER_ENABLED)
		Texture2D _StylizedSpecularOptMap1;
	#endif
	float4 _StylizedSpecularOptMap1_ST;
	float2 _StylizedSpecularOptMap1Pan;
	float _StylizedSpecularOptMap1UV;

	#if defined(PROP_StylizedSpecularOPTMAP2) || !defined(OPTIMIZER_ENABLED)
		Texture2D _StylizedSpecularOptMap2;
	#endif
	float4 _StylizedSpecularOptMap2_ST;
	float2 _StylizedSpecularOptMap2Pan;
	float _StylizedSpecularOptMap2UV;
	*/

	float4 _HighColor;
	float _UseLightColor;

	float _HighColor_Power;
	float _StylizedSpecularFeather;
	float _Layer1Strength;
	
	float _Layer2Size;
	float _StylizedSpecular2Feather;
	float _Layer2Strength;
	
	float _StylizedSpecularStrength;
	float _UseSpecularOptMap2;

	float _Is_BlendAddToHiColor;
	float _Is_SpecularToHighColor;
#endif

#T#PoiStylizedSpecularFunctions
float aaBlurStep(float gradient, float edge, float blur)
{
	float edgeMin = saturate(edge);
	float edgeMax = saturate(edge + blur * (1 - edge));
	return smoothstep(0, 1, saturate((gradient - edgeMin) / saturate(edgeMax - edgeMin + fwidth(gradient))));
}

#ifdef POI_STYLIZED_StylizedSpecular
	void stylizedSpecular(inout PoiFragData pfd, in PoiCam pc, in PoiLight pl, in PoiMesh pm)
	{
		float specArea = 0.5 * dot(pl.halfDir, pm.normals[1]) + 0.5;
		#if defined(PROP_HIGHCOLOR_TEX) || !defined(OPTIMIZER_ENABLED)
			float3 specularMap = POI2D_SAMPLER_PAN(_HighColor_Tex, _MainTex, poiUV(pm.uv[_HighColor_TexUV], _HighColor_Tex_ST), _HighColor_TexPan);
		#else
			float3 specularMap = 1;
		#endif

		// Spec 1
		float specMask1 = 0;
		if (_Is_SpecularToHighColor)
		{
			specMask1 = pow(specArea, exp2(lerp(11, 1, _HighColor_Power)));
		}
		else
		{
			specMask1 = aaBlurStep(specArea, (1.0 - pow(_HighColor_Power, 5)), _StylizedSpecularFeather);
		}
		specMask1 *= _Layer1Strength;

		// Spec 2
		float specMask2 = 0;
		if (_Is_SpecularToHighColor)
		{
			specMask2 = pow(specArea, exp2(lerp(11, 1, _Layer2Size)));
		}
		else
		{
			specMask2 = aaBlurStep(specArea, (1.0 - pow(_Layer2Size, 5)), _StylizedSpecular2Feather);
		}
		specMask2 *= _Layer2Strength;

		#if defined(PROP_SET_HIGHCOLORMASK) || !defined(OPTIMIZER_ENABLED)
			float specularMask = POI2D_SAMPLER_PAN(_Set_HighColorMask, _MainTex, poiUV(pm.uv[_Set_HighColorMaskUV], _Set_HighColorMask_ST), _Set_HighColorMaskPan).g;
		#else
			float specularMask = 1;
		#endif

		specularMask = saturate(specularMask + _Tweak_HighColorMaskLevel);

		float specMask = saturate(specMask1 + specMask2) * specularMask;
		float3 specular = specularMap * _HighColor * lerp(1, pl.directColor, _UseLightColor) * specMask * pl.occlusion * pl.attenuation * _StylizedSpecularStrength;
		
		if (_Is_BlendAddToHiColor == 1)
		{
			pfd.emission += specular;
		}
		else
		{
			pfd.baseColor = lerp(pfd.baseColor, specularMap * _HighColor * lerp(1, pl.directColor, _UseLightColor), saturate(specMask * pl.occlusion * pl.attenuation * _StylizedSpecularStrength));
		}

		//pfd.baseColor = _StylizedSpecularStrength;

	}
#endif

#T#PoiStylizedSpecularFunctionCalls
#ifdef POI_STYLIZED_StylizedSpecular
	stylizedSpecular(poiFragData, poiCam, poiLight, poiMesh);
#endif